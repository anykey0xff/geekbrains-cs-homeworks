// Миша и негатив
// 
// Миша уже научился хорошо фотографировать и недавно увлекся программированием. 
// Первая программа, которую он написал, позволяет формировать негатив бинарного черно-белого изображения.
// Бинарное черно-белое изображение – это прямоугольник, состоящий из пикселей, каждый из которых может быть либо черным, либо белым. 
// Негатив такого изображения получается путем замены каждого черного пикселя на белый, а каждого белого пикселя – на черный.
// Миша, как начинающий программист, написал свою программу с ошибкой, поэтому в результате ее исполнения мог получаться некорректный негатив. 
// Для того чтобы оценить уровень несоответствия получаемого негатива исходному изображению, Миша начал тестировать свою программу.
// В качестве входных данных он использовал исходные изображения. 
// Сформированные программой негативы он начал тщательно анализировать, каждый раз определяя число пикселей негатива, которые получены с ошибкой.
// Требуется написать программу, которая в качестве входных данных использует исходное бинарное черно-белое изображение и полученный Мишиной программой негатив,
// и на основе этого определяет количество пикселей, в которых допущена ошибка.
//
// Входные данные
// Первая строка входного файла INPUT.TXT содержит целые числа n и m (1 ≤ n, m ≤ 100) – высоту и ширину исходного изображения (в пикселях). 
// Последующие n строк содержат описание исходного изображения. Каждая строка состоит из m символов «B» и «W». 
// Символ «B» соответствует черному пикселю, а символ «W» – белому. 
// Далее следует пустая строка, а после нее – описание выведенного Мишиной программой изображения в том же формате, что и исходное изображение.
//
// Выходные данные
// В выходной файл OUTPUT.TXT необходимо вывести число пикселей негатива, которые неправильно сформированы Мишиной программой. 

Console.Clear();
Console.WriteLine("Программа \"Миша и негатив\"");

int M = new Random().Next(1,3);
int N = new Random().Next(1,6);

// Генерируем исходную матрицу
Console.WriteLine();
Console.WriteLine($"Исходное изображение {M} x {N}: ");
string[,] strArray = new string[M,N];
for (int i = 0; i < strArray.GetLength(0); i++)
{
    for (int j = 0; j < strArray.GetLength(1); j++)
    {
        int temp = new Random().Next(0,2);
        if (temp == 0) strArray[i,j] = "B";
        else strArray[i,j] = "W";
        Console.Write($"{strArray[i,j]}\t");
    }  
    Console.WriteLine();  
}

// Получаем негатив
Console.WriteLine($"Правильный негатив: ");
for (int i = 0; i < strArray.GetLength(0); i++)
{
    for (int j = 0; j < strArray.GetLength(1); j++)
    {
        if (strArray[i,j] == "B") strArray[i,j] = "W";
        else strArray[i,j] = "B";
        Console.Write($"{strArray[i,j]}\t");
    }   
    Console.WriteLine();
}

// Генерируем неправильную матрицу негатива
Console.WriteLine($"Неправильный негатив: ");
string[,] strArrayNegative = new string[M,N];
for (int i = 0; i < strArrayNegative.GetLength(0); i++)
{
    for (int j = 0; j < strArrayNegative.GetLength(1); j++)
    {
        int temp = new Random().Next(0,2);
        if (temp == 0) strArrayNegative[i,j] = "B";
        else strArrayNegative[i,j] = "W";
        Console.Write($"{strArrayNegative[i,j]}\t");
    }  
    Console.WriteLine();  
}

// Сраваниваем и считаем ошибки
int errorCount = 0;
for (int i = 0; i < strArray.GetLength(0); i++)
{
    for (int j = 0; j < strArray.GetLength(1); j++)
    {
        if (strArray[i,j] != strArrayNegative[i,j]) errorCount++;
    }
}

Console.WriteLine(); 
Console.WriteLine($"Количество ошибок: {errorCount}");

Console.WriteLine();
Console.ReadKey();